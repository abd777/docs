"use strict";(self.webpackChunkopenapi_stack=self.webpackChunkopenapi_stack||[]).push([[1534],{4137:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>h});var t=a(7294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function p(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function r(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=t.createContext({}),s=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):p(p({},n),e)),a},d=function(e){var n=s(e.components);return t.createElement(l.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=s(a),u=i,h=c["".concat(l,".").concat(u)]||c[u]||m[u]||o;return a?t.createElement(h,p(p({ref:n},d),{},{components:a})):t.createElement(h,p({ref:n},d))}));function h(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=a.length,p=new Array(o);p[0]=u;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[c]="string"==typeof e?e:i,p[1]=r;for(var s=2;s<o;s++)p[s]=a[s];return t.createElement.apply(null,p)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2986:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>p,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>s});var t=a(7462),i=(a(7294),a(4137));const o={title:"Quick Start: CLI",hide_title:!0,sidebar_position:1},p=void 0,r={unversionedId:"openapicmd/intro",id:"openapicmd/intro",title:"Quick Start: CLI",description:"openapicmd",source:"@site/docs/openapicmd/intro.md",sourceDirName:"openapicmd",slug:"/openapicmd/intro",permalink:"/docs/openapicmd/intro",draft:!1,editUrl:"https://github.com/anttiviljami/openapi-stack/edit/main/docs/openapicmd/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Quick Start: CLI",hide_title:!0,sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Bundling",permalink:"/docs/openapi-client-axios/bundling"},next:{title:"Swagger UI",permalink:"/docs/openapicmd/swagger-ui"}},l={},s=[{value:"Features",id:"features",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Commands",id:"commands",level:2},{value:"<code>openapi help</code>",id:"openapi-help",level:2},{value:"<code>openapi read</code>",id:"openapi-read",level:2},{value:"<code>openapi info</code>",id:"openapi-info",level:2},{value:"<code>openapi swagger-ui</code>",id:"openapi-swagger-ui",level:2},{value:"<code>openapi swagger-editor</code>",id:"openapi-swagger-editor",level:2},{value:"<code>openapi call</code>",id:"openapi-call",level:2},{value:"<code>openapi mock</code>",id:"openapi-mock",level:2},{value:"<code>openapi swagger2openapi</code>",id:"openapi-swagger2openapi",level:2},{value:"<code>openapi init</code>",id:"openapi-init",level:2},{value:"<code>openapi load</code>",id:"openapi-load",level:2},{value:"<code>openapi unload</code>",id:"openapi-unload",level:2},{value:"<code>openapi auth</code>",id:"openapi-auth",level:2}],d={toc:s},c="wrapper";function m(e){let{components:n,...a}=e;return(0,i.kt)(c,(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{alt:"openapicmd logo",src:"/img/openapi-stack-logo.png",className:"max-w-[150px]"}),(0,i.kt)("h1",{className:"mb-6"},"openapicmd",(0,i.kt)("a",{href:"https://github.com/anttiviljami/openapicmd",target:"_blank"},(0,i.kt)("img",{className:"w-[1em] ml-2 relative top-1",src:"https://img.icons8.com/material-sharp/96/000000/github.png",alt:"GitHub"}))),(0,i.kt)("p",null,"openapicmd - The CLI for all things OpenAPI and Swagger"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/anttiviljami/openapicmd/actions?query=workflow%3ACI"},(0,i.kt)("img",{parentName:"a",src:"https://github.com/anttiviljami/openapicmd/workflows/CI/badge.svg",alt:"CI"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/openapicmd"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/v/openapicmd.svg",alt:"npm version"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/openapicmd"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/dw/openapicmd",alt:"npm downloads"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/anttiviljami/openapicmd"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/github/stars/anttiviljami/openapicmd",alt:"GitHub stars"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/anttiviljami/openapicmd/blob/master/LICENSE"},(0,i.kt)("img",{parentName:"a",src:"http://img.shields.io/:license-mit-blue.svg",alt:"License"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://buymeacoff.ee/anttiviljami"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/donate-buy%20me%20a%20coffee-orange",alt:"Buy me a coffee"})))),(0,i.kt)("h2",{id:"features"},"Features"),(0,i.kt)("ul",{className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Read and convert local and remote JSON/YAML OpenAPI definition files"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Use as CLI client to easily call API endpoints"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Run ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/swagger-api/swagger-ui"},"Swagger UI")," locally"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Bundle static ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/swagger-api/swagger-ui"},"Swagger UI")," sites"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Run ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/swagger-api/swagger-editor"},"Swagger Editor")," locally"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Convert Swagger 2.0 to OpenAPI 3.0.x"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Run Local Mock APIs")),(0,i.kt)("h2",{id:"quick-start"},"Quick Start"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm install -g openapicmd\nopenapi help\n")),(0,i.kt)("p",null,"Or with npx:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npx openapicmd\n")),(0,i.kt)("h2",{id:"commands"},"Commands"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-help"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi help"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-read"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi read"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-info"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi info"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-swagger-ui"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi swagger-ui"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-swagger-editor"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi swagger-editor"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-call"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi call"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-mock"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi mock"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-swagger2openapi"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi swagger2openapi"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-init"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi init"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-load"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi load"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-unload"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi unload"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-auth"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi auth")))),(0,i.kt)("h2",{id:"openapi-help"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi help")),(0,i.kt)("p",null,"display help for openapi"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ openapi help [COMMAND]\n\nARGUMENTS\n  COMMAND  command to show help for\n\nOPTIONS\n  --all  see all commands in CLI\n")),(0,i.kt)("h2",{id:"openapi-read"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi read")),(0,i.kt)("p",null,"Read and manipulate definition files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'USAGE\n  $ openapi read [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -B, --bundle                                                  resolve remote $ref pointers\n\n  -C, --strip=default|all|openapi_client_axios|openapi_backend  Strip optional metadata such as examples and\n                                                                descriptions from definition\n\n  -D, --dereference                                             resolve $ref pointers\n\n  -H, --header=header                                           add request headers when calling remote urls\n\n  -I, --inject={"info":{"version":"1.0.0"}}                     inject JSON to definition with deep merge\n\n  -R, --root=/                                                  override API root path\n\n  -S, --server=http://localhost:9000                            override servers definition\n\n  -V, --validate                                                validate against openapi schema\n\n  -f, --format=(json|yaml|yml)                                  [default: yaml] output format\n\n  -h, --help                                                    show CLI help\n\n  --json                                                        format as json (short for -f json)\n\n  --yaml                                                        format as yaml (short for -f yaml)\n\nEXAMPLES\n  $ openapi read https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml\n  $ openapi read ./openapi.yml -f json > openapi.json\n')),(0,i.kt)("h2",{id:"openapi-info"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi info")),(0,i.kt)("p",null,"Display API information"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'USAGE\n  $ openapi info [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -B, --bundle                                                  resolve remote $ref pointers\n\n  -C, --strip=default|all|openapi_client_axios|openapi_backend  Strip optional metadata such as examples and\n                                                                descriptions from definition\n\n  -D, --dereference                                             resolve $ref pointers\n\n  -H, --header=header                                           add request headers when calling remote urls\n\n  -I, --inject={"info":{"version":"1.0.0"}}                     inject JSON to definition with deep merge\n\n  -R, --root=/                                                  override API root path\n\n  -S, --server=http://localhost:9000                            override servers definition\n\n  -V, --validate                                                validate against openapi schema\n\n  -h, --help                                                    show CLI help\n\n  --operations                                                  list operations in document\n\n  --schemas                                                     list schemas in document\n\n  --security                                                    list security schemes in document\n\nEXAMPLES\n  $ openapi info https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml\n  $ openapi info ./openapi.yml\n')),(0,i.kt)("h2",{id:"openapi-swagger-ui"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi swagger-ui")),(0,i.kt)("p",null,"Start or bundle a Swagger UI instance"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'USAGE\n  $ openapi swagger-ui [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -B, --bundle=outDir                                           bundle a static site to directory\n\n  -C, --strip=default|all|openapi_client_axios|openapi_backend  Strip optional metadata such as examples and\n                                                                descriptions from definition\n\n  -H, --header=header                                           add request headers when calling remote urls\n\n  -I, --inject={"info":{"version":"1.0.0"}}                     inject JSON to definition with deep merge\n\n  -R, --root=/                                                  override API root path\n\n  -S, --server=http://localhost:9000                            override servers definition\n\n  -h, --help                                                    show CLI help\n\n  -p, --port=9000                                               [default: 9000] port\n\n  --[no-]deeplinks                                              [default: true] allow deep linking\n\n  --expand=full|list|none                                       [default: list] default expansion setting for the\n                                                                operations and tags\n\n  --[no-]filter                                                 [default: true] enable filtering by tag\n\n  --[no-]logger                                                 [default: true] log requests\n\n  --[no-]operationids                                           [default: true] display operationIds\n\n  --proxy                                                       set up a proxy for the api to avoid CORS issues\n\n  --[no-]requestduration                                        [default: true] display request durations in "try it\n                                                                now"\n\n  --[no-]withcredentials                                        [default: true] send cookies in "try it now"\n\nEXAMPLES\n  $ openapi swagger-ui\n  $ openapi swagger-ui ./openapi.yml\n  $ openapi swagger-ui ./openapi.yml --bundle outDir\n')),(0,i.kt)("h2",{id:"openapi-swagger-editor"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi swagger-editor")),(0,i.kt)("p",null,"Start a Swagger Editor instance"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ openapi swagger-editor [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -H, --header=header  add request headers when calling remote urls\n  -h, --help           show CLI help\n  -p, --port=9000      [default: 9000] port\n  --[no-]logger        [default: true] log requests\n\nEXAMPLES\n  $ openapi swagger-editor\n  $ openapi swagger-editor ./openapi.yml\n")),(0,i.kt)("h2",{id:"openapi-call"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi call")),(0,i.kt)("p",null,"Call API endpoints"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'USAGE\n  $ openapi call [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -B, --bundle                                                  resolve remote $ref pointers\n\n  -C, --strip=default|all|openapi_client_axios|openapi_backend  Strip optional metadata such as examples and\n                                                                descriptions from definition\n\n  -D, --dereference                                             resolve $ref pointers\n\n  -H, --header=header                                           add request headers when calling remote urls\n\n  -I, --inject={"info":{"version":"1.0.0"}}                     inject JSON to definition with deep merge\n\n  -R, --root=/                                                  override API root path\n\n  -S, --server=http://localhost:9000                            override servers definition\n\n  -V, --validate                                                validate against openapi schema\n\n  -d, --data=data                                               request body\n\n  -h, --help                                                    show CLI help\n\n  -i, --include                                                 include status code and response headers the output\n\n  -k, --apikey=apikey                                           set api key\n\n  -o, --operation=operationId                                   operationId\n\n  -p, --param=key=value                                         parameter\n\n  -p, --password=password                                       set basic auth password\n\n  -s, --security=security                                       use security scheme\n\n  -t, --token=token                                             set bearer token\n\n  -u, --username=username                                       set basic auth username\n\n  -v, --verbose                                                 verbose mode\n\nEXAMPLES\n  $ openapi call -o getPets\n  $ openapi call -o getPet -p id=1\n  $ openapi call -o createPet -d \'{ "name": "Garfield" }\'\n')),(0,i.kt)("h2",{id:"openapi-mock"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi mock")),(0,i.kt)("p",null,"Start a local mock API server"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'USAGE\n  $ openapi mock [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -C, --strip=default|all|openapi_client_axios|openapi_backend  Strip optional metadata such as examples and\n                                                                descriptions from definition\n\n  -H, --header=header                                           add request headers when calling remote urls\n\n  -I, --inject={"info":{"version":"1.0.0"}}                     inject JSON to definition with deep merge\n\n  -R, --root=/                                                  override API root path\n\n  -S, --server=http://localhost:9000                            override servers definition\n\n  -U, --swagger-ui=docs                                         Swagger UI endpoint\n\n  -h, --help                                                    show CLI help\n\n  -p, --port=9000                                               [default: 9000] port\n\n  --[no-]logger                                                 [default: true] log requests\n\n  --[no-]validate                                               [default: true] validate requests according to schema\n\nEXAMPLES\n  $ openapi mock ./openapi.yml\n  $ openapi mock https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml\n')),(0,i.kt)("h2",{id:"openapi-swagger2openapi"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi swagger2openapi")),(0,i.kt)("p",null,"Convert Swagger 2.0 definitions to OpenAPI 3.0.x"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'USAGE\n  $ openapi swagger2openapi [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -B, --bundle                                                  resolve remote $ref pointers\n\n  -C, --strip=default|all|openapi_client_axios|openapi_backend  Strip optional metadata such as examples and\n                                                                descriptions from definition\n\n  -D, --dereference                                             resolve $ref pointers\n\n  -H, --header=header                                           add request headers when calling remote urls\n\n  -I, --inject={"info":{"version":"1.0.0"}}                     inject JSON to definition with deep merge\n\n  -R, --root=/                                                  override API root path\n\n  -S, --server=http://localhost:9000                            override servers definition\n\n  -V, --validate                                                validate against openapi schema\n\n  -f, --format=(json|yaml|yml)                                  [default: yaml] output format\n\n  -h, --help                                                    show CLI help\n\n  --json                                                        format as json (short for -f json)\n\n  --yaml                                                        format as yaml (short for -f yaml)\n\nEXAMPLE\n  $ openapi swagger2openapi --yaml ./swagger.json > openapi.yml\n')),(0,i.kt)("h2",{id:"openapi-init"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi init")),(0,i.kt)("p",null,"Initialise a definition file from scratch"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'USAGE\n  $ openapi init\n\nOPTIONS\n  -I, --inject={"info":{"version":"1.0.0"}}  inject JSON to definition with deep merge\n  -S, --server=http://localhost:9000         override servers definition\n  -T, --title=title                          [default: My API] The title for the API\n  -d, --description=description              Description for the API\n  -f, --format=(json|yaml|yml)               [default: yaml] output format\n  -h, --help                                 show CLI help\n  -v, --version=version                      [default: 0.0.1] Version of the API\n  --json                                     format as json (short for -f json)\n  --license=mit|apache2                      The license for the API\n  --terms=terms                              A URL to the Terms of Service for the API.\n  --yaml                                     format as yaml (short for -f yaml)\n\nEXAMPLE\n  $ openapi init --title \'My API\' > openapi.yml\n')),(0,i.kt)("h2",{id:"openapi-load"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi load")),(0,i.kt)("p",null,"Set the default definition file for a workspace (writes to .openapiconfig)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ openapi load DEFINITION\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -V, --validate  validate against openapi schema\n  -h, --help      show CLI help\n\nEXAMPLES\n  $ openapi load ./openapi.yml\n  $ openapi load https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml\n")),(0,i.kt)("h2",{id:"openapi-unload"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi unload")),(0,i.kt)("p",null,"Unset the default definition file for a workspace (writes to .openapiconfig)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"USAGE\n  $ openapi unload\n\nOPTIONS\n  -h, --help  show CLI help\n\nEXAMPLE\n  $ openapi unload\n")),(0,i.kt)("h2",{id:"openapi-auth"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi auth")),(0,i.kt)("p",null,"Authenticate with apis (writes to .openapiconfig)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'USAGE\n  $ openapi auth [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -B, --bundle                                                  resolve remote $ref pointers\n\n  -C, --strip=default|all|openapi_client_axios|openapi_backend  Strip optional metadata such as examples and\n                                                                descriptions from definition\n\n  -D, --dereference                                             resolve $ref pointers\n\n  -H, --header=header                                           add request headers when calling remote urls\n\n  -I, --inject={"info":{"version":"1.0.0"}}                     inject JSON to definition with deep merge\n\n  -R, --root=/                                                  override API root path\n\n  -S, --server=http://localhost:9000                            override servers definition\n\n  -V, --validate                                                validate against openapi schema\n\n  -h, --help                                                    show CLI help\n\n  -k, --apikey=apikey                                           set api key\n\n  -p, --password=password                                       set basic auth password\n\n  -s, --security=security                                       use security scheme\n\n  -t, --token=token                                             set bearer token\n\n  -u, --username=username                                       set basic auth username\n\nEXAMPLES\n  $ openapi auth\n  $ openapi auth --token eyJh...\n  $ openapi auth --security ApiKeyAuth --apikey secret123\n  $ openapi auth --security BasicAuth --username admin --password password\n')))}m.isMDXComponent=!0}}]);