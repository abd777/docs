"use strict";(self.webpackChunkopenapi_stack=self.webpackChunkopenapi_stack||[]).push([[1534],{4137:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=s(t),u=i,h=c["".concat(l,".").concat(u)]||c[u]||m[u]||o;return t?a.createElement(h,p(p({ref:n},d),{},{components:t})):a.createElement(h,p({ref:n},d))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,p=new Array(o);p[0]=u;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[c]="string"==typeof e?e:i,p[1]=r;for(var s=2;s<o;s++)p[s]=t[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2986:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>p,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>s});var a=t(7462),i=(t(7294),t(4137));const o={title:"Quick Start: CLI",hide_title:!0,sidebar_position:0},p=void 0,r={unversionedId:"openapicmd/intro",id:"openapicmd/intro",title:"Quick Start: CLI",description:"openapicmd",source:"@site/docs/openapicmd/intro.md",sourceDirName:"openapicmd",slug:"/openapicmd/intro",permalink:"/docs/openapicmd/intro",draft:!1,editUrl:"https://github.com/openapistack/docs/edit/main/docs/openapicmd/intro.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Quick Start: CLI",hide_title:!0,sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Bundling",permalink:"/docs/openapi-client-axios/bundling"},next:{title:"Generating types",permalink:"/docs/openapicmd/typegen"}},l={},s=[{value:"Features",id:"features",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"<code>openapi auth [DEFINITION]</code>",id:"openapi-auth-definition",level:2},{value:"<code>openapi call [DEFINITION]</code>",id:"openapi-call-definition",level:2},{value:"<code>openapi help [COMMAND]</code>",id:"openapi-help-command",level:2},{value:"<code>openapi info [DEFINITION]</code>",id:"openapi-info-definition",level:2},{value:"<code>openapi init</code>",id:"openapi-init",level:2},{value:"<code>openapi load DEFINITION</code>",id:"openapi-load-definition",level:2},{value:"<code>openapi mock [DEFINITION]</code>",id:"openapi-mock-definition",level:2},{value:"<code>openapi read [DEFINITION]</code>",id:"openapi-read-definition",level:2},{value:"<code>openapi swagger-editor [DEFINITION]</code>",id:"openapi-swagger-editor-definition",level:2},{value:"<code>openapi swagger-ui [DEFINITION]</code>",id:"openapi-swagger-ui-definition",level:2},{value:"<code>openapi swagger2openapi [DEFINITION]</code>",id:"openapi-swagger2openapi-definition",level:2},{value:"<code>openapi typegen [DEFINITION]</code>",id:"openapi-typegen-definition",level:2},{value:"<code>openapi unload</code>",id:"openapi-unload",level:2}],d={toc:s},c="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("div",{align:"center"},(0,i.kt)("img",{alt:"openapicmd logo",src:"/img/openapi-stack-logo.png",className:"max-w-[150px]"}),(0,i.kt)("h1",{className:"mb-6"},"openapicmd",(0,i.kt)("a",{href:"https://github.com/openapistack/openapicmd",target:"_blank"},(0,i.kt)("img",{className:"w-[1em] ml-2 relative top-1",src:"https://img.icons8.com/material-sharp/96/000000/github.png",alt:"GitHub"}))),(0,i.kt)("p",null,"openapicmd - The CLI for all things OpenAPI and Swagger"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/openapistack/openapicmd/actions?query=workflow%3ACI"},(0,i.kt)("img",{parentName:"a",src:"https://github.com/openapistack/openapicmd/workflows/CI/badge.svg",alt:"CI"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/openapicmd"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/v/openapicmd.svg",alt:"npm version"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/openapicmd"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/dw/openapicmd",alt:"npm downloads"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/openapistack/openapicmd"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/github/stars/anttiviljami/openapicmd",alt:"GitHub stars"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/openapistack/openapicmd/blob/master/LICENSE"},(0,i.kt)("img",{parentName:"a",src:"http://img.shields.io/:license-mit-blue.svg",alt:"License"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://buymeacoff.ee/anttiviljami"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/donate-buy%20me%20a%20coffee-orange",alt:"Buy me a coffee"})))),(0,i.kt)("h2",{id:"features"},"Features"),(0,i.kt)("ul",{className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Read and convert local and remote JSON/YAML OpenAPI definition files"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Use as a CLI client to easily call API endpoints"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Generate TypeScript types from OpenAPI definitions"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Run Local Mock APIs"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Run ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/swagger-api/swagger-ui"},"Swagger UI")," locally"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Bundle static ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/swagger-api/swagger-ui"},"Swagger UI")," sites"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Run ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/swagger-api/swagger-editor"},"Swagger Editor")," locally"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Convert Swagger 2.0 to OpenAPI 3.0.x")),(0,i.kt)("h2",{id:"quick-start"},"Quick Start"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm install -g openapicmd\nopenapi help\n")),(0,i.kt)("p",null,"Or with npx:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npx openapicmd\n")),(0,i.kt)("h1",{id:"commands"},"Commands"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-auth-definition"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi auth [DEFINITION]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-call-definition"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi call [DEFINITION]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-help-command"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi help [COMMAND]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-info-definition"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi info [DEFINITION]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-init"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi init"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-load-definition"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi load DEFINITION"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-mock-definition"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi mock [DEFINITION]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-read-definition"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi read [DEFINITION]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-swagger-editor-definition"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi swagger-editor [DEFINITION]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-swagger-ui-definition"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi swagger-ui [DEFINITION]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-swagger2openapi-definition"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi swagger2openapi [DEFINITION]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-typegen-definition"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi typegen [DEFINITION]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#openapi-unload"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi unload")))),(0,i.kt)("h2",{id:"openapi-auth-definition"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi auth [DEFINITION]")),(0,i.kt)("p",null,"Authenticate with apis (writes to .openapiconfig)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Authenticate with apis (writes to .openapiconfig)\n\nUSAGE\n  $ openapi auth [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -B, --bundle                                                  resolve remote $ref pointers\n\n  -C, --strip=default|all|openapi_client_axios|openapi_backend  Strip optional metadata such as examples and\n                                                                descriptions from definition\n\n  -D, --dereference                                             resolve $ref pointers\n\n  -H, --header=header                                           add request headers when calling remote urls\n\n  -I, --inject={"info":{"version":"1.0.0"}}                     inject JSON to definition with deep merge\n\n  -R, --root=/                                                  override API root path\n\n  -S, --server=http://localhost:9000                            override servers definition\n\n  -V, --validate                                                validate against openapi schema\n\n  -h, --help                                                    show CLI help\n\n  -k, --apikey=apikey                                           set api key\n\n  -p, --password=password                                       set basic auth password\n\n  -s, --security=security                                       use security scheme\n\n  -t, --token=token                                             set bearer token\n\n  -u, --username=username                                       set basic auth username\n\nEXAMPLES\n  $ openapi auth\n  $ openapi auth --token eyJh...\n  $ openapi auth --security ApiKeyAuth --apikey secret123\n  $ openapi auth --security BasicAuth --username admin --password password\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See code: ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/openapistack/openapicmd/blob/v1.17.0/src/commands/auth.ts"},"src/commands/auth.ts"))),(0,i.kt)("h2",{id:"openapi-call-definition"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi call [DEFINITION]")),(0,i.kt)("p",null,"Call API endpoints"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Call API endpoints\n\nUSAGE\n  $ openapi call [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -B, --bundle                                                  resolve remote $ref pointers\n\n  -C, --strip=default|all|openapi_client_axios|openapi_backend  Strip optional metadata such as examples and\n                                                                descriptions from definition\n\n  -D, --dereference                                             resolve $ref pointers\n\n  -H, --header=header                                           add request headers when calling remote urls\n\n  -I, --inject={"info":{"version":"1.0.0"}}                     inject JSON to definition with deep merge\n\n  -R, --root=/                                                  override API root path\n\n  -S, --server=http://localhost:9000                            override servers definition\n\n  -V, --validate                                                validate against openapi schema\n\n  -d, --data=data                                               request body\n\n  -h, --help                                                    show CLI help\n\n  -i, --include                                                 include status code and response headers the output\n\n  -k, --apikey=apikey                                           set api key\n\n  -o, --operation=operationId                                   operationId\n\n  -p, --param=key=value                                         parameter\n\n  -p, --password=password                                       set basic auth password\n\n  -s, --security=security                                       use security scheme\n\n  -t, --token=token                                             set bearer token\n\n  -u, --username=username                                       set basic auth username\n\n  -v, --verbose                                                 verbose mode\n\nEXAMPLES\n  $ openapi call -o getPets\n  $ openapi call -o getPet -p id=1\n  $ openapi call -o createPet -d \'{ "name": "Garfield" }\'\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See code: ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/openapistack/openapicmd/blob/v1.17.0/src/commands/call.ts"},"src/commands/call.ts"))),(0,i.kt)("h2",{id:"openapi-help-command"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi help [COMMAND]")),(0,i.kt)("p",null,"display help for openapi"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"display help for <%= config.bin %>\n\nUSAGE\n  $ openapi help [COMMAND]\n\nARGUMENTS\n  COMMAND  command to show help for\n\nOPTIONS\n  --all  see all commands in CLI\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See code: ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/oclif/plugin-help/blob/v3.2.14/src/commands/help.ts"},"@oclif/plugin-help"))),(0,i.kt)("h2",{id:"openapi-info-definition"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi info [DEFINITION]")),(0,i.kt)("p",null,"Display API information"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Display API information\n\nUSAGE\n  $ openapi info [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -B, --bundle                                                  resolve remote $ref pointers\n\n  -C, --strip=default|all|openapi_client_axios|openapi_backend  Strip optional metadata such as examples and\n                                                                descriptions from definition\n\n  -D, --dereference                                             resolve $ref pointers\n\n  -H, --header=header                                           add request headers when calling remote urls\n\n  -I, --inject={"info":{"version":"1.0.0"}}                     inject JSON to definition with deep merge\n\n  -R, --root=/                                                  override API root path\n\n  -S, --server=http://localhost:9000                            override servers definition\n\n  -V, --validate                                                validate against openapi schema\n\n  -h, --help                                                    show CLI help\n\n  --operations                                                  list operations in document\n\n  --schemas                                                     list schemas in document\n\n  --security                                                    list security schemes in document\n\nEXAMPLES\n  $ openapi info https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml\n  $ openapi info ./openapi.yml\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See code: ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/openapistack/openapicmd/blob/v1.17.0/src/commands/info.ts"},"src/commands/info.ts"))),(0,i.kt)("h2",{id:"openapi-init"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi init")),(0,i.kt)("p",null,"Initialise a definition file from scratch"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Initialise a definition file from scratch\n\nUSAGE\n  $ openapi init\n\nOPTIONS\n  -I, --inject={"info":{"version":"1.0.0"}}  inject JSON to definition with deep merge\n  -S, --server=http://localhost:9000         override servers definition\n  -T, --title=title                          [default: My API] The title for the API\n  -d, --description=description              Description for the API\n  -f, --format=(json|yaml|yml)               [default: yaml] output format\n  -h, --help                                 show CLI help\n  -v, --version=version                      [default: 0.0.1] Version of the API\n  --json                                     format as json (short for -f json)\n  --license=mit|apache2                      The license for the API\n  --terms=terms                              A URL to the Terms of Service for the API.\n  --yaml                                     format as yaml (short for -f yaml)\n\nEXAMPLE\n  $ openapi init --title \'My API\' > openapi.yml\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See code: ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/openapistack/openapicmd/blob/v1.17.0/src/commands/init.ts"},"src/commands/init.ts"))),(0,i.kt)("h2",{id:"openapi-load-definition"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi load DEFINITION")),(0,i.kt)("p",null,"Set the default definition file for a workspace (writes to .openapiconfig)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Set the default definition file for a workspace (writes to .openapiconfig)\n\nUSAGE\n  $ openapi load DEFINITION\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -V, --validate  validate against openapi schema\n  -h, --help      show CLI help\n\nEXAMPLES\n  $ openapi load ./openapi.yml\n  $ openapi load https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See code: ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/openapistack/openapicmd/blob/v1.17.0/src/commands/load.ts"},"src/commands/load.ts"))),(0,i.kt)("h2",{id:"openapi-mock-definition"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi mock [DEFINITION]")),(0,i.kt)("p",null,"Start a local mock API server"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Start a local mock API server\n\nUSAGE\n  $ openapi mock [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -C, --strip=default|all|openapi_client_axios|openapi_backend  Strip optional metadata such as examples and\n                                                                descriptions from definition\n\n  -H, --header=header                                           add request headers when calling remote urls\n\n  -I, --inject={"info":{"version":"1.0.0"}}                     inject JSON to definition with deep merge\n\n  -R, --root=/                                                  override API root path\n\n  -S, --server=http://localhost:9000                            override servers definition\n\n  -U, --swagger-ui=docs                                         Swagger UI endpoint\n\n  -h, --help                                                    show CLI help\n\n  -p, --port=9000                                               [default: 9000] port\n\n  --[no-]logger                                                 [default: true] log requests\n\n  --[no-]validate                                               [default: true] validate requests according to schema\n\nEXAMPLES\n  $ openapi mock ./openapi.yml\n  $ openapi mock https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See code: ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/openapistack/openapicmd/blob/v1.17.0/src/commands/mock.ts"},"src/commands/mock.ts"))),(0,i.kt)("h2",{id:"openapi-read-definition"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi read [DEFINITION]")),(0,i.kt)("p",null,"Read and manipulate definition files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Read and manipulate definition files\n\nUSAGE\n  $ openapi read [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -B, --bundle                                                  resolve remote $ref pointers\n\n  -C, --strip=default|all|openapi_client_axios|openapi_backend  Strip optional metadata such as examples and\n                                                                descriptions from definition\n\n  -D, --dereference                                             resolve $ref pointers\n\n  -H, --header=header                                           add request headers when calling remote urls\n\n  -I, --inject={"info":{"version":"1.0.0"}}                     inject JSON to definition with deep merge\n\n  -R, --root=/                                                  override API root path\n\n  -S, --server=http://localhost:9000                            override servers definition\n\n  -V, --validate                                                validate against openapi schema\n\n  -f, --format=(json|yaml|yml)                                  [default: yaml] output format\n\n  -h, --help                                                    show CLI help\n\n  --json                                                        format as json (short for -f json)\n\n  --yaml                                                        format as yaml (short for -f yaml)\n\nEXAMPLES\n  $ openapi read https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml\n  $ openapi read ./openapi.yml -f json > openapi.json\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See code: ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/openapistack/openapicmd/blob/v1.17.0/src/commands/read.ts"},"src/commands/read.ts"))),(0,i.kt)("h2",{id:"openapi-swagger-editor-definition"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi swagger-editor [DEFINITION]")),(0,i.kt)("p",null,"Start a Swagger Editor instance"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Start a Swagger Editor instance\n\nUSAGE\n  $ openapi swagger-editor [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -H, --header=header  add request headers when calling remote urls\n  -h, --help           show CLI help\n  -p, --port=9000      [default: 9000] port\n  --[no-]logger        [default: true] log requests\n\nEXAMPLES\n  $ openapi swagger-editor\n  $ openapi swagger-editor ./openapi.yml\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See code: ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/openapistack/openapicmd/blob/v1.17.0/src/commands/swagger-editor.ts"},"src/commands/swagger-editor.ts"))),(0,i.kt)("h2",{id:"openapi-swagger-ui-definition"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi swagger-ui [DEFINITION]")),(0,i.kt)("p",null,"Start or bundle a Swagger UI instance"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Start or bundle a Swagger UI instance\n\nUSAGE\n  $ openapi swagger-ui [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -B, --bundle=outDir                                           bundle a static site to directory\n\n  -C, --strip=default|all|openapi_client_axios|openapi_backend  Strip optional metadata such as examples and\n                                                                descriptions from definition\n\n  -H, --header=header                                           add request headers when calling remote urls\n\n  -I, --inject={"info":{"version":"1.0.0"}}                     inject JSON to definition with deep merge\n\n  -R, --root=/                                                  override API root path\n\n  -S, --server=http://localhost:9000                            override servers definition\n\n  -h, --help                                                    show CLI help\n\n  -p, --port=9000                                               [default: 9000] port\n\n  --[no-]deeplinks                                              [default: true] allow deep linking\n\n  --expand=full|list|none                                       [default: list] default expansion setting for the\n                                                                operations and tags\n\n  --[no-]filter                                                 [default: true] enable filtering by tag\n\n  --[no-]logger                                                 [default: true] log requests\n\n  --[no-]operationids                                           [default: true] display operationIds\n\n  --proxy                                                       set up a proxy for the api to avoid CORS issues\n\n  --[no-]requestduration                                        [default: true] display request durations in "try it\n                                                                now"\n\n  --[no-]withcredentials                                        [default: true] send cookies in "try it now"\n\nEXAMPLES\n  $ openapi swagger-ui\n  $ openapi swagger-ui ./openapi.yml\n  $ openapi swagger-ui ./openapi.yml --bundle outDir\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See code: ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/openapistack/openapicmd/blob/v1.17.0/src/commands/swagger-ui.ts"},"src/commands/swagger-ui.ts"))),(0,i.kt)("h2",{id:"openapi-swagger2openapi-definition"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi swagger2openapi [DEFINITION]")),(0,i.kt)("p",null,"Convert Swagger 2.0 definitions to OpenAPI 3.0.x"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Convert Swagger 2.0 definitions to OpenAPI 3.0.x\n\nUSAGE\n  $ openapi swagger2openapi [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -B, --bundle                                                  resolve remote $ref pointers\n\n  -C, --strip=default|all|openapi_client_axios|openapi_backend  Strip optional metadata such as examples and\n                                                                descriptions from definition\n\n  -D, --dereference                                             resolve $ref pointers\n\n  -H, --header=header                                           add request headers when calling remote urls\n\n  -I, --inject={"info":{"version":"1.0.0"}}                     inject JSON to definition with deep merge\n\n  -R, --root=/                                                  override API root path\n\n  -S, --server=http://localhost:9000                            override servers definition\n\n  -V, --validate                                                validate against openapi schema\n\n  -f, --format=(json|yaml|yml)                                  [default: yaml] output format\n\n  -h, --help                                                    show CLI help\n\n  --json                                                        format as json (short for -f json)\n\n  --yaml                                                        format as yaml (short for -f yaml)\n\nEXAMPLE\n  $ openapi swagger2openapi --yaml ./swagger.json > openapi.yml\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See code: ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/openapistack/openapicmd/blob/v1.17.0/src/commands/swagger2openapi.ts"},"src/commands/swagger2openapi.ts"))),(0,i.kt)("h2",{id:"openapi-typegen-definition"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi typegen [DEFINITION]")),(0,i.kt)("p",null,"Generate types from openapi definition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Generate types from openapi definition\n\nUSAGE\n  $ openapi typegen [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -B, --bundle                                                  resolve remote $ref pointers\n\n  -C, --strip=default|all|openapi_client_axios|openapi_backend  Strip optional metadata such as examples and\n                                                                descriptions from definition\n\n  -D, --dereference                                             resolve $ref pointers\n\n  -H, --header=header                                           add request headers when calling remote urls\n\n  -I, --inject={"info":{"version":"1.0.0"}}                     inject JSON to definition with deep merge\n\n  -R, --root=/                                                  override API root path\n\n  -S, --server=http://localhost:9000                            override servers definition\n\n  -V, --validate                                                validate against openapi schema\n\n  -h, --help                                                    show CLI help\n\nEXAMPLE\n  $ openapi typegen ./openapi.yml > openapi.d.ts\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See code: ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/openapistack/openapicmd/blob/v1.17.0/src/commands/typegen.ts"},"src/commands/typegen.ts"))),(0,i.kt)("h2",{id:"openapi-unload"},(0,i.kt)("inlineCode",{parentName:"h2"},"openapi unload")),(0,i.kt)("p",null,"Unset the default definition file for a workspace (writes to .openapiconfig)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Unset the default definition file for a workspace (writes to .openapiconfig)\n\nUSAGE\n  $ openapi unload\n\nOPTIONS\n  -h, --help  show CLI help\n\nEXAMPLE\n  $ openapi unload\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See code: ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/openapistack/openapicmd/blob/v1.17.0/src/commands/unload.ts"},"src/commands/unload.ts"))))}m.isMDXComponent=!0}}]);