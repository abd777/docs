"use strict";(self.webpackChunkopenapi_stack=self.webpackChunkopenapi_stack||[]).push([[4995],{4137:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},p=Object.keys(e);for(a=0;a<p.length;a++)t=p[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)t=p[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,p=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),m=s(t),u=i,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||p;return t?a.createElement(g,o(o({ref:n},c),{},{components:t})):a.createElement(g,o({ref:n},c))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var p=t.length,o=new Array(p);o[0]=u;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[m]="string"==typeof e?e:i,o[1]=r;for(var s=2;s<p;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2110:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>p,metadata:()=>r,toc:()=>s});var a=t(7462),i=(t(7294),t(4137));const p={title:"Invoking APIs",sidebar_position:1},o=void 0,r={unversionedId:"examples/calling-apis",id:"examples/calling-apis",title:"Invoking APIs",description:"In this example we will write code to interact with a public mock API available on example.openapistack.co/openapi.json",source:"@site/docs/examples/calling-apis.md",sourceDirName:"examples",slug:"/examples/calling-apis",permalink:"/docs/examples/calling-apis",draft:!1,editUrl:"https://github.com/openapistack/docs/edit/main/docs/examples/calling-apis.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Invoking APIs",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:".openapiconfig",permalink:"/docs/openapicmd/config"},next:{title:"Building APIs",permalink:"/docs/examples/building-apis"}},l={},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Creating a client instace",id:"creating-a-client-instace",level:2},{value:"Adding Types",id:"adding-types",level:2},{value:"Invoking the API",id:"invoking-the-api",level:2},{value:"Full Example",id:"full-example",level:2}],c={toc:s},m="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"In this example we will write code to interact with a public mock API available on ",(0,i.kt)("a",{parentName:"p",href:"https://example.openapistack.co/openapi.json"},"example.openapistack.co/openapi.json"))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you're looking to invoke APIs via CLI, see ",(0,i.kt)("a",{parentName:"p",href:"/docs/openapicmd/call/"},(0,i.kt)("inlineCode",{parentName:"a"},"openapicmd call")))),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"Before starting, make sure to install ",(0,i.kt)("inlineCode",{parentName:"p"},"openapi-client-axios")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"axios")," as dependencies in your project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm i openapi-client-axios axios\n")),(0,i.kt)("h2",{id:"creating-a-client-instace"},"Creating a client instace"),(0,i.kt)("p",null,"To call our API, we import ",(0,i.kt)("inlineCode",{parentName:"p"},"openapi-client-axios")," and configure it by passing the OpenAPI definition URL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { OpenAPIClientAxios } from 'openapi-client-axios';\n\nconst api = new OpenAPIClientAxios({\n  definition: 'https://example.openapistack.co/openapi.json',\n});\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note: For optimal performance, it's recommended to pass the definition as a JS object instead or fetching it from a URL in runtime.")),(0,i.kt)("p",null,"To initialise a client instance, we call ",(0,i.kt)("inlineCode",{parentName:"p"},"api.init()"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const client = await api.init();\n")),(0,i.kt)("h2",{id:"adding-types"},"Adding Types"),(0,i.kt)("p",null,"For type-safety and code autocompletion we use the CLI command ",(0,i.kt)("inlineCode",{parentName:"p"},"openapicmd typegen")," to generate types."),(0,i.kt)("p",null,"This command will create a file named ",(0,i.kt)("inlineCode",{parentName:"p"},"openapi.d.ts")," in the src directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"npx openapicmd typegen https://example.openapistack.co/openapi.json > src/openapi.d.ts\n")),(0,i.kt)("p",null,"We can now import the types and use them to create our fully typed API client by passing the ",(0,i.kt)("inlineCode",{parentName:"p"},"Client")," type to our ",(0,i.kt)("inlineCode",{parentName:"p"},"init")," call."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import type { Client } from './openapi.d.ts';\n\nconst client = await api.init<Client>();\n")),(0,i.kt)("h2",{id:"invoking-the-api"},"Invoking the API"),(0,i.kt)("p",null,"Finally, we are ready to call our API using ",(0,i.kt)("a",{parentName:"p",href:"/docs/openapi-client-axios/usage/#operation-methods"},"operation methods")," based on our ",(0,i.kt)("inlineCode",{parentName:"p"},"openapi.yml")," spec:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const petsResponse = await client.getPets();\n\nconst pets = petsResponse.data; // Pet[] inferred as type as defined in the API\n")),(0,i.kt)("h2",{id:"full-example"},"Full Example"),(0,i.kt)("p",null,"Putting everything together, here is our full code example combining all the steps:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// src/example.ts\nimport { OpenAPIClientAxios } from 'openapi-client-axios';\nimport type { Client } from './openapi.d.ts';\n\nconst api = new OpenAPIClientAxios({\n  definition: 'https://example.openapistack.co/openapi.json'\n});\n\nasync function main() {\n  const client = await api.init<Client>();\n\n  const petsResponse = await client.getPets();\n  const pets = petsResponse.data; // Pet[] inferred as type\n  console.log('getPets response', petsResponse.status, pets);\n}\nmain();\n")))}d.isMDXComponent=!0}}]);