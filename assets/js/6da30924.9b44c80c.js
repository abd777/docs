"use strict";(self.webpackChunkopenapi_stack=self.webpackChunkopenapi_stack||[]).push([[8008],{4137:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,y=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(y,o(o({ref:t},l),{},{components:n})):r.createElement(y,o({ref:t},l))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:a,o[1]=p;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},370:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var r=n(7462),a=(n(7294),n(4137));const i={sidebar_position:3,title:"Use with React Query"},o=void 0,p={unversionedId:"examples/tanstack-query",id:"examples/tanstack-query",title:"Use with React Query",description:"To use openapi-client-axios in a declarative way in the frontend, we recommend using TanStack Query (previously known as React Query) together with type safe clients created with openapi-stack.",source:"@site/docs/examples/tanstack-query.md",sourceDirName:"examples",slug:"/examples/tanstack-query",permalink:"/docs/examples/tanstack-query",draft:!1,editUrl:"https://github.com/openapistack/docs/edit/main/docs/examples/tanstack-query.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Use with React Query"},sidebar:"tutorialSidebar",previous:{title:"Invoking APIs",permalink:"/docs/examples/calling-apis"},next:{title:"Testing with msw + openapi-backend mocks",permalink:"/docs/examples/testing-react-with-jest-and-openapi-mocks"}},s={},c=[{value:"Example with React Query",id:"example-with-react-query",level:2}],l={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To use ",(0,a.kt)("inlineCode",{parentName:"p"},"openapi-client-axios")," in a declarative way in the frontend, we recommend using ",(0,a.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest"},"TanStack Query")," (previously known as React Query) together with type safe clients created with openapi-stack."),(0,a.kt)("h2",{id:"example-with-react-query"},"Example with React Query"),(0,a.kt)("p",null,"First, let's set up our type safe API client:"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Use the ",(0,a.kt)("a",{parentName:"p",href:"/docs/openapicmd/typegen/"},(0,a.kt)("inlineCode",{parentName:"a"},"openapicmd typegen"))," command to generate the ",(0,a.kt)("inlineCode",{parentName:"p"},"openapi.d.ts")," type file for your API.")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"For optimal performance, it's recommended to pass the definition as a JS object instead or fetching it from a URL in runtime.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// api.ts\nimport { OpenAPIClientAxios } from 'openapi-client-axios';\nimport type { Client } from './openapi.d.ts';\n\nconst api = new OpenAPIClientAxios({\n  definition: 'https://example.openapistack.co/openapi.json',\n});\n\nexport const getApiClient = async () => {\n  const client = await api.getClient<Client>();\n\n  // add auth token\n  client.default.headers['authorization'] = `Bearer ${API_TOKEN}`;\n\n  return client;\n}\n")),(0,a.kt)("p",null,"Now we are ready to use our type safe client with React Query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"// PetView.tsx\nimport { useQuery } from 'react-query';\nimport { getApiClient } from './api';\nimport Loader from './Loader';\n\nexport const PetView = (props: { petId: string }) => {\n  const petQuery = useQuery(\n    ['getPetById', props.petId],\n    () => getApiClient()\n      .then(client => client.getPetById(props.petId))\n      .then(res => res.data),\n    { enabled: !!props.petId },\n  );\n\n  const pet = petQuery.data; // type Pet is inferred from openapi.d.ts\n\n  return (\n    <div>\n      {petQuery.fetching && <Loader />} \n\n      {petQuery.data && (/* TODO: show pet information */)}\n    </div>\n  )\n}\n")))}m.isMDXComponent=!0}}]);