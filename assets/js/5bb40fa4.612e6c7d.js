"use strict";(self.webpackChunkopenapi_stack=self.webpackChunkopenapi_stack||[]).push([[4995],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},p=Object.keys(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=a.createContext({}),s=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(r.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,p=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=i,f=u["".concat(r,".").concat(d)]||u[d]||m[d]||p;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var p=n.length,o=new Array(p);o[0]=d;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<p;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2110:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>m,frontMatter:()=>p,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(4137));const p={title:"Calling APIs",sidebar_position:1},o=void 0,l={unversionedId:"examples/calling-apis",id:"examples/calling-apis",title:"Calling APIs",description:"In this example, we will call the mock API available on example.openapistack.co/openapi.json",source:"@site/docs/examples/calling-apis.md",sourceDirName:"examples",slug:"/examples/calling-apis",permalink:"/docs/examples/calling-apis",draft:!1,editUrl:"https://github.com/anttiviljami/openapi-stack/edit/main/docs/examples/calling-apis.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Calling APIs",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"API First",permalink:"/docs/api-first"},next:{title:"Building APIs",permalink:"/docs/examples/building-apis"}},r={},s=[{value:"Adding Types",id:"adding-types",level:2},{value:"Full Example",id:"full-example",level:2}],c={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"In this example, we will call the mock API available on ",(0,i.kt)("a",{parentName:"p",href:"https://example.openapistack.co/openapi.json"},"example.openapistack.co/openapi.json"))),(0,i.kt)("p",null,"To call our API, we will import ",(0,i.kt)("inlineCode",{parentName:"p"},"openapi-client-axios")," and create a client."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { OpenAPIClientAxios } from 'openapi-client-axios';\n\nconst api = new OpenAPIClientAxios({\n  definition: 'https://example.openapistack.co/openapi.json',\n})\n")),(0,i.kt)("p",null,"To create a client instance, we initialize with ",(0,i.kt)("inlineCode",{parentName:"p"},"api.init()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const client = await api.init();\n")),(0,i.kt)("h2",{id:"adding-types"},"Adding Types"),(0,i.kt)("p",null,"We now have a working API client ready to call our API, but no types yet."),(0,i.kt)("p",null,"To generate types for our client, we use the CLI command ",(0,i.kt)("inlineCode",{parentName:"p"},"openapicmd typegen")," and save the output to a file called ",(0,i.kt)("inlineCode",{parentName:"p"},"openapi.d.ts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"npx openapicmd typegen https://example.openapistack.co/openapi.json > src/openapi.d.ts\n")),(0,i.kt)("p",null,"We can now import the types in our code, and use them to create our fully typed API client"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import type { Client } from './openapi.d.ts';\n\nconst client = await api.init<Client>();\n")),(0,i.kt)("p",null,"Finally, we are ready to call our API using operationIds defined in our ",(0,i.kt)("inlineCode",{parentName:"p"},"openapi.yml")," spec:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const petsResponse = await client.getPets();\nconsole.log('getPets response', petsResponse.status, petsResponse.data);\n")),(0,i.kt)("h2",{id:"full-example"},"Full Example"),(0,i.kt)("p",null,"Putting everything together, here is our full code example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// src/example.ts\nimport { OpenAPIClientAxios } from 'openapi-client-axios';\nimport type { Client } from './openapi.d.ts';\n\nconst api = new OpenAPIClientAxios({\n  definition: 'https://example.openapistack.co/openapi.json'\n});\n\nasync function main() {\n  const client = await api.init<Client>();\n\n  const petsResponse = await client.getPets();\n  console.log('getPets response', petsResponse.status, petsResponse.data);\n}\nmain();\n")))}m.isMDXComponent=!0}}]);