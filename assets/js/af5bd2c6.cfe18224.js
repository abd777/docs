"use strict";(self.webpackChunkopenapi_stack=self.webpackChunkopenapi_stack||[]).push([[1901],{4137:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var p=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);n&&(p=p.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,p)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,p,a=function(e,n){if(null==e)return{};var t,p,a={},i=Object.keys(e);for(p=0;p<i.length;p++)t=i[p],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(p=0;p<i.length;p++)t=i[p],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=p.createContext({}),l=function(e){var n=p.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=l(e.components);return p.createElement(s.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return p.createElement(p.Fragment,{},n)}},u=p.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=l(t),u=a,y=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return t?p.createElement(y,r(r({ref:n},c),{},{components:t})):p.createElement(y,r({ref:n},c))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[d]="string"==typeof e?e:a,r[1]=o;for(var l=2;l<i;l++)r[l]=t[l];return p.createElement.apply(null,r)}return p.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8748:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var p=t(7462),a=(t(7294),t(4137));const i={sidebar_position:1},r="Generating types",o={unversionedId:"openapicmd/typegen",id:"openapicmd/typegen",title:"Generating types",description:"Use the typegen command to generate Typescript types from your OpenAPI definition.",source:"@site/docs/openapicmd/typegen.md",sourceDirName:"openapicmd",slug:"/openapicmd/typegen",permalink:"/docs/openapicmd/typegen",draft:!1,editUrl:"https://github.com/openapistack/docs/edit/main/docs/openapicmd/typegen.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Quick Start: CLI",permalink:"/docs/openapicmd/intro"},next:{title:"Generating documentation",permalink:"/docs/openapicmd/generating-documentation"}},s={},l=[{value:"Usage",id:"usage",level:2},{value:"Importing generated types",id:"importing-generated-types",level:2},{value:"Typesafe Clients",id:"typesafe-clients",level:2},{value:"Typesafe Backends",id:"typesafe-backends",level:2}],c={toc:l},d="wrapper";function m(e){let{components:n,...i}=e;return(0,a.kt)(d,(0,p.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"generating-types"},"Generating types"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"typegen")," command to generate Typescript types from your OpenAPI definition."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"openapi typegen ./openapi.yml > openapi.d.ts\n")),(0,a.kt)("p",null,"or with npx:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npx openapicmd typegen ./openapi.yml > openapi.d.ts\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"You can also use remote URLs to pass your openapi spec:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},"openapi typegen https://example.openapistack.co/openapi.json\n"))),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Generate types from openapi definition\n\nUSAGE\n  $ openapi typegen [DEFINITION] [-h] [-D] [-B] [-R /] [-H <value>...] [-V] [-S http://localhost:9000...] [-I\n    {"info":{"version":"1.0.0"}}...] [-E x-internal] [-C default|all|openapi_client_axios|openapi_backend] [-U] [-b\n    <value>] [--client] [--backend] [-A]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nFLAGS\n  -A, --[no-]type-aliases                                       Generate module level type aliases for schema components\n                                                                defined in spec\n  -B, --bundle                                                  resolve remote $ref pointers\n  -C, --strip=default|all|openapi_client_axios|openapi_backend  Strip optional metadata such as examples and\n                                                                descriptions from definition\n  -D, --dereference                                             resolve $ref pointers\n  -E, --exclude-ext=x-internal                                  Specify an openapi extension to exclude parts of the\n                                                                spec\n  -H, --header=<value>...                                       add request headers when calling remote urls\n  -I, --inject={"info":{"version":"1.0.0"}}...                  inject JSON to definition with deep merge\n  -R, --root=/                                                  override API root path\n  -S, --server=http://localhost:9000...                         override servers definition\n  -U, --[no-]remove-unreferenced                                Remove unreferenced components, you can skip individual\n                                                                component being removed by setting x-openapicmd-keep to\n                                                                true\n  -V, --validate                                                validate against openapi schema\n  -b, --banner=<value>                                          include a banner comment at the top of the generated\n                                                                file\n  -h, --help                                                    Show CLI help.\n      --backend                                                 Generate types for openapi-backend\n      --client                                                  Generate types for openapi-client-axios (default)\n\nEXAMPLES\n  $ openapi typegen --client ./openapi.yml > openapi.d.ts\n  $ openapi typegen --backend ./openapi.yml > openapi.d.ts\n')),(0,a.kt)("h2",{id:"importing-generated-types"},"Importing generated types"),(0,a.kt)("p",null,"You can directly import types defined as schemas in your openapi spec as Typescript types:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import type { Pet, User } from "./openapi.d.ts";\n\nconst myPet: Pet = {\n  id: 1,\n  name: "My Pet",\n  tag: "My Tag",\n};\n\nconst myUser: User = {\n  id: 1,\n  name: "My User",\n};\n')),(0,a.kt)("h2",{id:"typesafe-clients"},"Typesafe Clients"),(0,a.kt)("p",null,"The output of ",(0,a.kt)("inlineCode",{parentName:"p"},"openapi typegen --client")," exports a type called ",(0,a.kt)("inlineCode",{parentName:"p"},"Client"),", which can be directly used with clients created with ",(0,a.kt)("inlineCode",{parentName:"p"},"OpenAPIClientAxios"),"."),(0,a.kt)("p",null,"Both the ",(0,a.kt)("inlineCode",{parentName:"p"},"api.getClient()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"api.init()")," methods support passing in a Client type."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Client as PetStoreClient } from "./openapi.d.ts";\n\nconst client = await api.init<PetStoreClient>();\nconst client = await api.getClient<PetStoreClient>();\n')),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"TypeScript IntelliSense",src:t(1101).Z,width:"768",height:"445"})),(0,a.kt)("h2",{id:"typesafe-backends"},"Typesafe Backends"),(0,a.kt)("p",null,"To generate types for the backend, use ",(0,a.kt)("inlineCode",{parentName:"p"},"openapi typegen --backend"),"."),(0,a.kt)("p",null,"See documentation for ",(0,a.kt)("a",{parentName:"p",href:"/docs/openapi-backend/typescript"},"usage of openapi-backend with TypeScript"),"."))}m.isMDXComponent=!0},1101:(e,n,t)=>{t.d(n,{Z:()=>p});const p=t.p+"assets/images/intellisense-b61ace10fd35746dd5bfefa977c0645e.gif"}}]);