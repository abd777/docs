"use strict";(self.webpackChunkopenapi_stack=self.webpackChunkopenapi_stack||[]).push([[2044],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var p=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);t&&(p=p.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,p)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,p,a=function(e,t){if(null==e)return{};var n,p,a={},o=Object.keys(e);for(p=0;p<o.length;p++)n=o[p],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(p=0;p<o.length;p++)n=o[p],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=p.createContext({}),l=function(e){var t=p.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return p.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return p.createElement(p.Fragment,{},t)}},u=p.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=l(n),u=a,y=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?p.createElement(y,i(i({ref:t},c),{},{components:n})):p.createElement(y,i({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[d]="string"==typeof e?e:a,i[1]=r;for(var l=2;l<o;l++)i[l]=n[l];return p.createElement.apply(null,i)}return p.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2827:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var p=n(7462),a=(n(7294),n(4137));const o={sidebar_position:3,title:"Typegen"},i="Typegen package",r={unversionedId:"openapi-client-axios/typegen",id:"openapi-client-axios/typegen",title:"Typegen",description:"It's recommended to use openapicmd typegen to generate types instead of directly installing the typegen package.",source:"@site/docs/openapi-client-axios/typegen.md",sourceDirName:"openapi-client-axios",slug:"/openapi-client-axios/typegen",permalink:"/docs/openapi-client-axios/typegen",draft:!1,editUrl:"https://github.com/openapistack/docs/edit/main/docs/openapi-client-axios/typegen.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Typegen"},sidebar:"tutorialSidebar",previous:{title:"Operation Methods",permalink:"/docs/openapi-client-axios/usage"},next:{title:"Bundling",permalink:"/docs/openapi-client-axios/bundling"}},s={},l=[{value:"Usage",id:"usage",level:2},{value:"Typesafe Clients",id:"typesafe-clients",level:2},{value:"Importing Schemas",id:"importing-schemas",level:2},{value:"Advanced: <code>--transformOperationName</code>",id:"advanced---transformoperationname",level:2}],c={toc:l},d="wrapper";function m(e){let{components:t,...o}=e;return(0,a.kt)(d,(0,p.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"typegen-package"},"Typegen package"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"It's recommended to use ",(0,a.kt)("a",{parentName:"p",href:"/docs/openapicmd/typegen/"},(0,a.kt)("inlineCode",{parentName:"a"},"openapicmd typegen"))," to generate types instead of directly installing the typegen package. ")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"openapi-client-axios-typegen")," is a command line tool to generate easy to use Typescript types from\nOpenAPI files."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"TypeScript IntelliSense",src:n(3133).Z,width:"768",height:"445"})),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npm install -g openapi-client-axios-typegen\n")),(0,a.kt)("p",null,"or with npx:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npx openapi-client-axios-typegen\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Usage: typegen [file]\n\nOptions:\n      --help                    Show help                              [boolean]\n      --version                 Show version number                    [boolean]\n  -t, --transformOperationName                                          [string]\n\nExamples:\n  typegen ./openapi.yml > openapi.d.ts\n  typegen https://openapistack.co/petstore.openapi.json > openapi.d.ts\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"typegen")," supports both local and remote files:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"typegen ./openapi.yaml > openapi.d.ts # local file\ntypegen https://petstore3.swagger.io/api/v3/openapi.json > openapi.d.ts # remote url\n")),(0,a.kt)("h2",{id:"typesafe-clients"},"Typesafe Clients"),(0,a.kt)("p",null,"The output of ",(0,a.kt)("inlineCode",{parentName:"p"},"typegen")," exports a type called ",(0,a.kt)("inlineCode",{parentName:"p"},"Client"),", which can be directly used with clients created with ",(0,a.kt)("inlineCode",{parentName:"p"},"OpenAPIClientAxios"),"."),(0,a.kt)("p",null,"Both the ",(0,a.kt)("inlineCode",{parentName:"p"},"api.getClient()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"api.init()")," methods support passing in a Client type."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Client as PetStoreClient } from "./openapi.d.ts";\n\nconst client = await api.init<PetStoreClient>();\nconst client = await api.getClient<PetStoreClient>();\n')),(0,a.kt)("h2",{id:"importing-schemas"},"Importing Schemas"),(0,a.kt)("p",null,"You can import schemas and response/request models defined in your openapi definition as Typescript types:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Components, Paths } from "./openapi.d.ts";\n\nexport type Pet = Components.Schemas.Pet;\nexport type User = Components.Schemas.User;\n\nexport type AddPetRequest = Paths.AddPet.RequestBody;\nexport type AddPetResponse = Paths.AddPet.Responses.$200;\n')),(0,a.kt)("h2",{id:"advanced---transformoperationname"},"Advanced: ",(0,a.kt)("inlineCode",{parentName:"h2"},"--transformOperationName")),(0,a.kt)("p",null,"You can provide a predicate function to typegen to transform operation names in the output type file."),(0,a.kt)("p",null,"The function needs to be exported from a module:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// operation-transform.ts\nexport const prefix = (operationId: string) => ["$", operationId].join("");\n')),(0,a.kt)("p",null,"Example usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"typegen ./openapi.yaml --transformOperationName operation-transform.prefix > openapi.d.ts\n")))}m.isMDXComponent=!0},3133:(e,t,n)=>{n.d(t,{Z:()=>p});const p=n.p+"assets/images/intellisense-b61ace10fd35746dd5bfefa977c0645e.gif"}}]);