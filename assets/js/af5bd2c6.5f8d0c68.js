"use strict";(self.webpackChunkopenapi_stack=self.webpackChunkopenapi_stack||[]).push([[1901],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var p=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);t&&(p=p.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,p)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,p,i=function(e,t){if(null==e)return{};var n,p,i={},r=Object.keys(e);for(p=0;p<r.length;p++)n=r[p],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(p=0;p<r.length;p++)n=r[p],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=p.createContext({}),l=function(e){var t=p.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return p.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return p.createElement(p.Fragment,{},t)}},u=p.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=l(n),u=i,y=d["".concat(s,".").concat(u)]||d[u]||m[u]||r;return n?p.createElement(y,a(a({ref:t},c),{},{components:n})):p.createElement(y,a({ref:t},c))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:i,a[1]=o;for(var l=2;l<r;l++)a[l]=n[l];return p.createElement.apply(null,a)}return p.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8748:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var p=n(7462),i=(n(7294),n(4137));const r={sidebar_position:1},a="Generating types",o={unversionedId:"openapicmd/typegen",id:"openapicmd/typegen",title:"Generating types",description:"Use the typegen command to generate Typescript types from your OpenAPI definition.",source:"@site/docs/openapicmd/typegen.md",sourceDirName:"openapicmd",slug:"/openapicmd/typegen",permalink:"/docs/openapicmd/typegen",draft:!1,editUrl:"https://github.com/anttiviljami/openapi-stack/edit/main/docs/openapicmd/typegen.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Quick Start: CLI",permalink:"/docs/openapicmd/intro"},next:{title:"Swagger UI",permalink:"/docs/openapicmd/swagger-ui"}},s={},l=[{value:"Usage",id:"usage",level:2},{value:"Importing Schemas",id:"importing-schemas",level:2},{value:"Typesafe Clients",id:"typesafe-clients",level:2}],c={toc:l},d="wrapper";function m(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,p.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"generating-types"},"Generating types"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"typegen")," command to generate Typescript types from your OpenAPI definition."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"openapi typegen ./openapi.yml > openapi.d.ts\n")),(0,i.kt)("p",null,"or with npx:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npx openapicmd typegen ./openapi.yml > openapi.d.ts\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can also use remote URLs to pass your openapi spec:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"openapi typegen https://example.openapistack.co/openapi.json\n"))),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Generate types from openapi definition\n\nUSAGE\n  $ openapi typegen [DEFINITION]\n\nARGUMENTS\n  DEFINITION  input definition file\n\nOPTIONS\n  -B, --bundle                                                  resolve remote $ref pointers\n\n  -D, --dereference                                             resolve $ref pointers\n\n  -I, --inject={"info":{"version":"1.0.0"}}                     inject JSON to definition with deep merge\n\n  -V, --validate                                                validate against openapi schema\n\n  -h, --help                                                    show CLI help\n\nEXAMPLE\n  $ openapi typegen ./openapi.yml > openapi.d.ts\n')),(0,i.kt)("h2",{id:"importing-schemas"},"Importing Schemas"),(0,i.kt)("p",null,"You can import schemas and response/request models defined in your openapi definition as Typescript types:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import type { Components, Paths } from "./openapi.d.ts";\n\nexport type Pet = Components.Schemas.Pet;\nexport type User = Components.Schemas.User;\n\nexport type AddPetRequest = Paths.AddPet.RequestBody;\nexport type AddPetResponse = Paths.AddPet.Responses.$200;\n')),(0,i.kt)("h2",{id:"typesafe-clients"},"Typesafe Clients"),(0,i.kt)("p",null,"The output of ",(0,i.kt)("inlineCode",{parentName:"p"},"typegen")," exports a type called ",(0,i.kt)("inlineCode",{parentName:"p"},"Client"),", which can be directly used with clients created with ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenAPIClientAxios"),"."),(0,i.kt)("p",null,"Both the ",(0,i.kt)("inlineCode",{parentName:"p"},"api.getClient()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"api.init()")," methods support passing in a Client type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Client as PetStoreClient } from "./openapi.d.ts";\n\nconst client = await api.init<PetStoreClient>();\nconst client = await api.getClient<PetStoreClient>();\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"TypeScript IntelliSense",src:n(3133).Z,width:"768",height:"445"})),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"typegen")," command uses ",(0,i.kt)("a",{parentName:"p",href:"/docs/openapi-client-axios/typegen/"},(0,i.kt)("inlineCode",{parentName:"a"},"openapi-client-axios-typegen"))," under the hood.")))}m.isMDXComponent=!0},3133:(e,t,n)=>{n.d(t,{Z:()=>p});const p=n.p+"assets/images/intellisense-b61ace10fd35746dd5bfefa977c0645e.gif"}}]);