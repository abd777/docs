"use strict";(self.webpackChunkopenapi_stack=self.webpackChunkopenapi_stack||[]).push([[4375],{4137:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>l});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),d=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=d(e.components);return a.createElement(i.Provider,{value:n},e.children)},P="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),P=d(t),y=r,l=P["".concat(i,".").concat(y)]||P[y]||c[y]||s;return t?a.createElement(l,o(o({ref:n},m),{},{components:t})):a.createElement(l,o({ref:n},m))}));function l(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=y;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p[P]="string"==typeof e?e:r,o[1]=p;for(var d=2;d<s;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},9702:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var a=t(7462),r=(t(7294),t(4137));const s={sidebar_position:9,title:"TypeScript"},o="openapi-backend with TypeScript",p={unversionedId:"openapi-backend/typescript",id:"openapi-backend/typescript",title:"TypeScript",description:"OpenAPI Backend is entirely built with typescript and supports using types in operation handlers.",source:"@site/docs/openapi-backend/typescript.md",sourceDirName:"openapi-backend",slug:"/openapi-backend/typescript",permalink:"/docs/openapi-backend/typescript",draft:!1,editUrl:"https://github.com/openapistack/docs/edit/main/docs/openapi-backend/typescript.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,title:"TypeScript"},sidebar:"tutorialSidebar",previous:{title:"Auth with Security Handlers",permalink:"/docs/openapi-backend/security-handlers"},next:{title:"Reference",permalink:"/docs/openapi-backend/api"}},i={},d=[{value:"Importing generated types",id:"importing-generated-types",level:2},{value:"Typesafe Operation Handlers",id:"typesafe-operation-handlers",level:2},{value:"Example type file",id:"example-type-file",level:2}],m={toc:d},P="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(P,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"openapi-backend-with-typescript"},"openapi-backend with TypeScript"),(0,r.kt)("p",null,"OpenAPI Backend is entirely built with typescript and supports using types in operation handlers."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/docs/openapicmd/typegen"},(0,r.kt)("inlineCode",{parentName:"a"},"openapi typegen"))," command can be used to generate types to for use on the backend side using the ",(0,r.kt)("inlineCode",{parentName:"p"},"--backend")," option."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can set up a script in package.json to easily update types when the openapi spec is changed."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "openapi": "openapi typegen --backend ./openapi.yaml > src/types/openapi.d.ts"\n  }\n}\n'))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"openapi typegen")," supports both local and remote files:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npx openapicmd typegen --backend ./openapi.yaml > src/types/openapi.d.ts # local file\nnpx openapicmd typegen --backend https://petstore3.swagger.io/api/v3/openapi.json > src/types/openapi.d.ts # remote url\n")),(0,r.kt)("h2",{id:"importing-generated-types"},"Importing generated types"),(0,r.kt)("p",null,"You can directly import types defined as schemas in your openapi spec as Typescript types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import type { Pet, User } from "./openapi.d.ts";\n\nconst myPet: Pet = {\n  id: 1,\n  name: "My Pet",\n  tag: "My Tag",\n};\n\nconst myUser: User = {\n  id: 1,\n  name: "My User",\n};\n')),(0,r.kt)("h2",{id:"typesafe-operation-handlers"},"Typesafe Operation Handlers"),(0,r.kt)("p",null,"For type safety in API handlers, annotate your operation handlers with the ",(0,r.kt)("inlineCode",{parentName:"p"},"OperationHandler")," generic type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import type { OperationHandler, OperationResponse } from "./openapi.d.ts";\nimport type { Request, Response } from "express";\n\nconst updatePetHandler: OperationHandler<"updatePet"> = async (\n  c,\n  _req: Request,\n  res: Response\n) => {\n  const petId = c.request.params.petId; // string\n  const requestBody = c.request.requestBody; // Pet\n\n  const updatedPet = await db.updatePet(petId, requestBody);\n\n  const response: OperationResponse<"updatePet"> = {\n    ...updatedPet,\n  };\n\n  return res.status(200).json(response);\n};\n')),(0,r.kt)("p",null,"You can also create a typed response util function using the ",(0,r.kt)("inlineCode",{parentName:"p"},"HandlerResponse")," generic type to make sure the response is typed correctly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import type { HandlerResponse } from "./openapi.d.ts";\nimport type { Response } from "express";\n\nexport const replyJSON = <T>(\n  json: T,\n  res: Response,\n  statusCode: number = 200\n): HandlerResponse<T> => {\n  return res.status(statusCode).json(json);\n};\n')),(0,r.kt)("p",null,"Usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { replyJSON } from "./utils";\n\nconst getPetHandler: OperationHandler<"getPet"> = async (c) => {\n  const petId = c.request.params.petId; // string\n\n  const result = await db.getPetById(petId);\n\n  return replyJSON(result, res);\n};\n')),(0,r.kt)("h2",{id:"example-type-file"},"Example type file"),(0,r.kt)("p",null,"Here's a full example of a generated type file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// openapi.d.ts\n\nimport type { Context, UnknownParams } from "openapi-backend";\n\ndeclare namespace Components {\n  namespace RequestBodies {\n    export type PetPayload = Schemas.PetPayload;\n  }\n  namespace Schemas {\n    /**\n     * PetId\n     * Unique identifier for pet in database\n     * example:\n     * 1\n     */\n    export type PetId = number;\n    export interface PetPayload {\n      /**\n       * PetName\n       * Name of the pet\n       * example:\n       * Garfield\n       */\n      name: string;\n    }\n    /**\n     * QueryLimit\n     * Number of items to return\n     * example:\n     * 25\n     */\n    export type QueryLimit = number;\n    /**\n     * QueryOffset\n     * Starting offset for returning items\n     * example:\n     * 0\n     */\n    export type QueryOffset = number;\n  }\n}\ndeclare namespace Paths {\n  namespace CreatePet {\n    export type RequestBody = Components.RequestBodies.PetPayload;\n    namespace Responses {\n      export interface $201 {}\n    }\n  }\n  namespace DeletePetById {\n    namespace Parameters {\n      export type Id =\n        /**\n         * PetId\n         * Unique identifier for pet in database\n         * example:\n         * 1\n         */\n        Components.Schemas.PetId;\n    }\n    export interface PathParameters {\n      id: Parameters.Id;\n    }\n    namespace Responses {\n      export interface $200 {}\n      export interface $404 {}\n    }\n  }\n  namespace GetOwnerByPetId {\n    namespace Parameters {\n      export type Id =\n        /**\n         * PetId\n         * Unique identifier for pet in database\n         * example:\n         * 1\n         */\n        Components.Schemas.PetId;\n    }\n    export interface PathParameters {\n      id: Parameters.Id;\n    }\n    namespace Responses {\n      export interface $200 {}\n      export interface $404 {}\n    }\n  }\n  namespace GetPetById {\n    namespace Parameters {\n      export type Id =\n        /**\n         * PetId\n         * Unique identifier for pet in database\n         * example:\n         * 1\n         */\n        Components.Schemas.PetId;\n    }\n    export interface PathParameters {\n      id: Parameters.Id;\n    }\n    namespace Responses {\n      export interface $200 {}\n      export interface $404 {}\n    }\n  }\n  namespace GetPetOwner {\n    namespace Parameters {\n      export type OwnerId =\n        /**\n         * PetId\n         * Unique identifier for pet in database\n         * example:\n         * 1\n         */\n        Components.Schemas.PetId;\n      export type PetId =\n        /**\n         * PetId\n         * Unique identifier for pet in database\n         * example:\n         * 1\n         */\n        Components.Schemas.PetId;\n    }\n    export interface PathParameters {\n      petId: Parameters.PetId;\n      ownerId: Parameters.OwnerId;\n    }\n    namespace Responses {\n      export interface $200 {}\n      export interface $404 {}\n    }\n  }\n  namespace GetPets {\n    namespace Parameters {\n      export type Limit =\n        /**\n         * QueryLimit\n         * Number of items to return\n         * example:\n         * 25\n         */\n        Components.Schemas.QueryLimit;\n      export type Offset =\n        /**\n         * QueryOffset\n         * Starting offset for returning items\n         * example:\n         * 0\n         */\n        Components.Schemas.QueryOffset;\n    }\n    export interface QueryParameters {\n      limit?: Parameters.Limit;\n      offset?: Parameters.Offset;\n    }\n    namespace Responses {\n      export interface $200 {}\n    }\n  }\n  namespace GetPetsMeta {\n    namespace Responses {\n      export interface $200 {}\n    }\n  }\n  namespace GetPetsRelative {\n    namespace Responses {\n      export interface $200 {}\n    }\n  }\n  namespace ReplacePetById {\n    namespace Parameters {\n      export type Id =\n        /**\n         * PetId\n         * Unique identifier for pet in database\n         * example:\n         * 1\n         */\n        Components.Schemas.PetId;\n    }\n    export interface PathParameters {\n      id: Parameters.Id;\n    }\n    export type RequestBody = Components.RequestBodies.PetPayload;\n    namespace Responses {\n      export interface $200 {}\n      export interface $404 {}\n    }\n  }\n  namespace UpdatePetById {\n    namespace Parameters {\n      export type Id =\n        /**\n         * PetId\n         * Unique identifier for pet in database\n         * example:\n         * 1\n         */\n        Components.Schemas.PetId;\n    }\n    export interface PathParameters {\n      id: Parameters.Id;\n    }\n    export type RequestBody = Components.RequestBodies.PetPayload;\n    namespace Responses {\n      export interface $200 {}\n      export interface $404 {}\n    }\n  }\n}\n\nexport interface Operations {\n  /**\n   * GET /pets\n   */\n  ["getPets"]: {\n    requestBody: any;\n    params: UnknownParams;\n    query: Paths.GetPets.QueryParameters;\n    headers: UnknownParams;\n    cookies: UnknownParams;\n    context: Context<\n      any,\n      UnknownParams,\n      Paths.GetPets.QueryParameters,\n      UnknownParams,\n      UnknownParams\n    >;\n    response: Paths.GetPets.Responses.$200;\n  };\n  /**\n   * POST /pets\n   */\n  ["createPet"]: {\n    requestBody: Paths.CreatePet.RequestBody;\n    params: UnknownParams;\n    query: UnknownParams;\n    headers: UnknownParams;\n    cookies: UnknownParams;\n    context: Context<\n      Paths.CreatePet.RequestBody,\n      UnknownParams,\n      UnknownParams,\n      UnknownParams,\n      UnknownParams\n    >;\n    response: Paths.CreatePet.Responses.$201;\n  };\n  /**\n   * GET /pets/{id}\n   */\n  ["getPetById"]: {\n    requestBody: any;\n    params: Paths.GetPetById.PathParameters;\n    query: UnknownParams;\n    headers: UnknownParams;\n    cookies: UnknownParams;\n    context: Context<\n      any,\n      Paths.GetPetById.PathParameters,\n      UnknownParams,\n      UnknownParams,\n      UnknownParams\n    >;\n    response: Paths.GetPetById.Responses.$200 | Paths.GetPetById.Responses.$404;\n  };\n  /**\n   * PUT /pets/{id}\n   */\n  ["replacePetById"]: {\n    requestBody: Paths.ReplacePetById.RequestBody;\n    params: Paths.ReplacePetById.PathParameters;\n    query: UnknownParams;\n    headers: UnknownParams;\n    cookies: UnknownParams;\n    context: Context<\n      Paths.ReplacePetById.RequestBody,\n      Paths.ReplacePetById.PathParameters,\n      UnknownParams,\n      UnknownParams,\n      UnknownParams\n    >;\n    response:\n      | Paths.ReplacePetById.Responses.$200\n      | Paths.ReplacePetById.Responses.$404;\n  };\n  /**\n   * PATCH /pets/{id}\n   */\n  ["updatePetById"]: {\n    requestBody: Paths.UpdatePetById.RequestBody;\n    params: Paths.UpdatePetById.PathParameters;\n    query: UnknownParams;\n    headers: UnknownParams;\n    cookies: UnknownParams;\n    context: Context<\n      Paths.UpdatePetById.RequestBody,\n      Paths.UpdatePetById.PathParameters,\n      UnknownParams,\n      UnknownParams,\n      UnknownParams\n    >;\n    response:\n      | Paths.UpdatePetById.Responses.$200\n      | Paths.UpdatePetById.Responses.$404;\n  };\n  /**\n   * DELETE /pets/{id}\n   */\n  ["deletePetById"]: {\n    requestBody: any;\n    params: Paths.DeletePetById.PathParameters;\n    query: UnknownParams;\n    headers: UnknownParams;\n    cookies: UnknownParams;\n    context: Context<\n      any,\n      Paths.DeletePetById.PathParameters,\n      UnknownParams,\n      UnknownParams,\n      UnknownParams\n    >;\n    response:\n      | Paths.DeletePetById.Responses.$200\n      | Paths.DeletePetById.Responses.$404;\n  };\n  /**\n   * GET /pets/{id}/owner\n   */\n  ["getOwnerByPetId"]: {\n    requestBody: any;\n    params: Paths.GetOwnerByPetId.PathParameters;\n    query: UnknownParams;\n    headers: UnknownParams;\n    cookies: UnknownParams;\n    context: Context<\n      any,\n      Paths.GetOwnerByPetId.PathParameters,\n      UnknownParams,\n      UnknownParams,\n      UnknownParams\n    >;\n    response:\n      | Paths.GetOwnerByPetId.Responses.$200\n      | Paths.GetOwnerByPetId.Responses.$404;\n  };\n  /**\n   * GET /pets/{petId}/owner/{ownerId}\n   */\n  ["getPetOwner"]: {\n    requestBody: any;\n    params: Paths.GetPetOwner.PathParameters;\n    query: UnknownParams;\n    headers: UnknownParams;\n    cookies: UnknownParams;\n    context: Context<\n      any,\n      Paths.GetPetOwner.PathParameters,\n      UnknownParams,\n      UnknownParams,\n      UnknownParams\n    >;\n    response:\n      | Paths.GetPetOwner.Responses.$200\n      | Paths.GetPetOwner.Responses.$404;\n  };\n  /**\n   * GET /pets/meta\n   */\n  ["getPetsMeta"]: {\n    requestBody: any;\n    params: UnknownParams;\n    query: UnknownParams;\n    headers: UnknownParams;\n    cookies: UnknownParams;\n    context: Context<\n      any,\n      UnknownParams,\n      UnknownParams,\n      UnknownParams,\n      UnknownParams\n    >;\n    response: Paths.GetPetsMeta.Responses.$200;\n  };\n  /**\n   * GET /pets/relative\n   */\n  ["getPetsRelative"]: {\n    requestBody: any;\n    params: UnknownParams;\n    query: UnknownParams;\n    headers: UnknownParams;\n    cookies: UnknownParams;\n    context: Context<\n      any,\n      UnknownParams,\n      UnknownParams,\n      UnknownParams,\n      UnknownParams\n    >;\n    response: Paths.GetPetsRelative.Responses.$200;\n  };\n}\n\nexport type OperationContext<operationId extends keyof Operations> =\n  Operations[operationId]["context"];\nexport type OperationResponse<operationId extends keyof Operations> =\n  Operations[operationId]["response"];\nexport type HandlerResponse<\n  ResponseBody,\n  ResponseModel = Record<string, any>\n> = ResponseModel & { _t?: ResponseBody };\nexport type OperationHandlerResponse<operationId extends keyof Operations> =\n  HandlerResponse<OperationResponse<operationId>>;\nexport type OperationHandler<\n  operationId extends keyof Operations,\n  HandlerArgs extends unknown[] = unknown[]\n> = (\n  ...params: [OperationContext<operationId>, ...HandlerArgs]\n) => Promise<OperationHandlerResponse<operationId>>;\n\nexport type PetId = Components.Schemas.PetId;\nexport type PetPayload = Components.Schemas.PetPayload;\nexport type QueryLimit = Components.Schemas.QueryLimit;\nexport type QueryOffset = Components.Schemas.QueryOffset;\n')))}c.isMDXComponent=!0}}]);